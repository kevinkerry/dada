package com.youyisi.app.soa.infrastructure.helper;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class AutoGeneratedCodeHelper {

	private String projectName = "app.soa";// 项目名
	private String domainname = "UserGoldBean";// domain名
	private String companyname = "youyisi";// company名
	private String packageOutPath = "com." + companyname + "." + projectName + ".domain.goldbean";// 指定实体生成所在包的路径

	private String lastpackage = packageOutPath.replaceAll("com." + companyname + "." + projectName + ".domain.", "");// 指定实体生成所在包的拓展路径
	private String domain_packageOutPath = "com." + companyname + "." + "sports" + ".domain." + lastpackage;// 指定实体生成所在包的路径
	private String lastOutPath = lastpackage.replaceAll("\\.", "/");// 指定实体生成所在包的拓展目录

	private String authorName = "shuye";// 作者名字
	private String tablename = "user_gold_bean";// 表名
	private String[] colnames; // 列名数组
	private String[] colTypes; // 列名类型数组
	private int[] colSizes; // 列名大小数组
	private boolean f_util = false; // 是否需要导入包java.util.*
	private boolean f_sql = false; // 是否需要导入包java.sql.*

	// 数据库连接dev_setting dev_crawler
	private static final String dataBaseName = "dada_sports";// 数据库名
	private static final String URL = "jdbc:mysql://10.1.80.200:3306/" + dataBaseName;
	private static final String NAME = "root";
	private static final String PASS = "root";
	private static final String DRIVER = "com.mysql.jdbc.Driver";
	private static String primaryKey = "";

	/*
	 * 构造函数
	 */
	public AutoGeneratedCodeHelper() {
		// 创建连接
		Connection con = null;
		// 查要生成实体类的表
		String sql = "select * from " + tablename;
		PreparedStatement pStemt = null;
		try {
			try {
				Class.forName(DRIVER);
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			con = DriverManager.getConnection(URL, NAME, PASS);
			pStemt = con.prepareStatement(sql);
			ResultSetMetaData rsmd = pStemt.getMetaData();
			ResultSet resultSet = con.getMetaData().getPrimaryKeys(null, null, tablename);
			if (!resultSet.isAfterLast()) {
				resultSet.next();
				System.out.println(resultSet.getString("TABLE_NAME") + " " + resultSet.getString("COLUMN_NAME"));
				primaryKey += resultSet.getString("COLUMN_NAME");
			}
			int size = rsmd.getColumnCount(); // 统计列
			colnames = new String[size];
			colTypes = new String[size];
			colSizes = new int[size];
			for (int i = 0; i < size; i++) {
				colnames[i] = rsmd.getColumnName(i + 1);
				colTypes[i] = rsmd.getColumnTypeName(i + 1);

				if (colTypes[i].equalsIgnoreCase("datetime")) {
					f_util = true;
				}
				if (colTypes[i].equalsIgnoreCase("image") || colTypes[i].equalsIgnoreCase("text")) {
					f_sql = true;
				}
				colSizes[i] = rsmd.getColumnDisplaySize(i + 1);
			}

			String domain = buildDomain();
			String persist = buildPersist();
			String interfaces = buildInterfaces();
			String application = buildApplication();
			String applicationImpl = buildApplicationImpl();
			String persistImpl = buildPersistImpl();
			String mybatisXml = buildXml();
			try {
				File directory = new File("");
				writeInterfaces(interfaces, directory);
				writeDomain(domain, directory);

				writeApplication(application, directory);

				writeApplicationImpl(applicationImpl, directory);
				writeXml(mybatisXml, directory);
				writePersist(persist, directory);
				writePersistImpl(persistImpl, directory);

			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void writePersistImpl(String persistImpl, File directory) throws Exception {
		String outputPath = directory.getAbsolutePath() + "/src/main/java/com/" + companyname + "/"
				+ "app/soa/infrastructure/persist/" + lastOutPath + "/impl/" + "Mybatis" + firstUpperCase(domainname)
				+ "RepositoryImpl.java";
		createFile(directory.getAbsolutePath() + "/src/main/java/com/" + companyname + "/app/soa/"
				+ "/infrastructure/persist/" + lastOutPath + "/impl/", outputPath);
		FileWriter fw = new FileWriter(outputPath);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(persistImpl);
		pw.flush();
		pw.close();

	}

	private String buildPersistImpl() {
		StringBuffer sb = new StringBuffer();
		sb.append("package com." + companyname + "." + anyLowerCase(projectName) + ".infrastructure.persist."
				+ lastpackage + ".impl;\r\n\n");

		sb.append("import org.springframework.stereotype.Repository;\r\n");

		sb.append("import com." + companyname + "." + anyLowerCase("sports") + ".domain." + lastpackage + "."
				+ firstUpperCase(domainname) + ";\r\n");
		sb.append("import com." + companyname + "." + anyLowerCase(projectName) + ".infrastructure.persist."
				+ lastpackage + "." + firstUpperCase(domainname) + "Repository;\r\n");
		sb.append("import com." + companyname + ".mybatis.MybatisOperations;\r\n\n");

		sb.append("/**\r\n");
		sb.append(" * @author " + authorName + "\r\n");
		sb.append(" * @time " + getDate() + "\r\n");
		sb.append(" */\r\n");
		sb.append("@Repository\r\n");
		sb.append("public class Mybatis" + firstUpperCase(domainname)
				+ "RepositoryImpl extends MybatisOperations<Long, " + firstUpperCase(domainname) + "> implements "
				+ firstUpperCase(domainname) + "Repository {\r\n");

		sb.append("}\r\n");
		return sb.toString();
	}

	private String buildPersist() {
		StringBuffer sb = new StringBuffer();
		sb.append("package com." + companyname + "." + anyLowerCase(projectName) + ".infrastructure.persist."
				+ lastpackage + ";\r\n\n");
		sb.append("import com." + companyname + "." + anyLowerCase("sports") + ".domain." + lastpackage + "."
				+ firstUpperCase(domainname) + ";\r\n");
		sb.append("import com." + companyname + ".mybatis.MybatisRepository;\r\n\n");
		sb.append("/**\r\n");
		sb.append(" * @author " + authorName + "\r\n");
		sb.append(" * @time " + getDate() + "\r\n");
		sb.append(" */\r\n");
		sb.append("public interface " + firstUpperCase(domainname) + "Repository extends MybatisRepository<Long, "
				+ firstUpperCase(domainname) + "> {\r\n");

		sb.append("}\r\n");

		return sb.toString();
	}

	private String buildApplicationImpl() {
		StringBuffer sb = new StringBuffer();
		sb.append("package com." + companyname + "." + anyLowerCase(projectName) + ".application." + lastpackage
				+ ";\r\n\n");

		sb.append("import org.springframework.beans.factory.annotation.Autowired;\r\n");
		sb.append("import org.springframework.stereotype.Service;\r\n");
		sb.append("import com.youyisi.app.soa.exception.SoaException;\r\n");

		sb.append("import com." + companyname + "." + anyLowerCase(projectName) + ".remote." + lastpackage + "."
				+ firstUpperCase(domainname) + "ServiceRemote;\r\n");
		sb.append("import com." + companyname + "." + anyLowerCase("sports") + ".domain." + lastpackage + "."
				+ firstUpperCase(domainname) + ";\r\n");
		sb.append("import com." + companyname + "." + anyLowerCase(projectName) + ".infrastructure.persist."
				+ lastpackage + "." + firstUpperCase(domainname) + "Repository;\r\n");
		sb.append("import com." + companyname + ".lang.Page;\r\n\n");

		sb.append("/**\r\n");
		sb.append(" * @author " + authorName + "\r\n");
		sb.append(" * @time " + getDate() + "\r\n");
		sb.append(" */\r\n");

		sb.append("@Service\r\n");
		sb.append("public class " + firstUpperCase(domainname) + "Service implements " + firstUpperCase(domainname)
				+ "ServiceRemote {\r\n\n");

		sb.append("\t@Autowired\r\n");
		sb.append("\tprivate " + firstUpperCase(domainname) + "Repository repository;\r\n\n");

		sb.append("\t@Override\r\n");
		sb.append("\tpublic " + firstUpperCase(domainname) + " get(Long id) throws SoaException{\r\n");
		sb.append("\t\treturn repository.get(id);\r\n");
		sb.append("\t}\r\n\n");

		sb.append("\t@Override\r\n");
		sb.append("\tpublic " + firstUpperCase(domainname) + " save(" + firstUpperCase(domainname)
				+ " entity) throws SoaException{\r\n");
		sb.append("\t\treturn repository.save(entity);\r\n");
		sb.append("}\r\n\n");

		sb.append("\t@Override\r\n");
		sb.append("\tpublic Integer delete(" + firstUpperCase(domainname) + " entity) throws SoaException{\r\n");
		sb.append("\t\treturn repository.delete(entity);\r\n");
		sb.append("\t}\r\n\n");

		sb.append("\t@Override\r\n");
		sb.append("\tpublic Integer update(" + firstUpperCase(domainname) + " entity) throws SoaException{\r\n");
		sb.append("\t\treturn repository.update(entity);\r\n");
		sb.append("\t}\r\n");

		sb.append("\t@Override\r\n");
		sb.append("\tpublic Page<" + firstUpperCase(domainname) + "> queryPage(Page<" + firstUpperCase(domainname)
				+ "> page) throws SoaException{\r\n");
		sb.append("\t\treturn repository.queryPage(page);\r\n");
		sb.append("\t}\r\n");

		sb.append("}\r\n");

		return sb.toString();
	}

	private void writePersist(String persist, File directory) throws Exception {

		String outputPath = directory.getAbsolutePath() + "/src/main/java/com/" + companyname + "/"
				+ "app/soa/infrastructure/persist/" + lastOutPath + "/" + firstUpperCase(domainname)
				+ "Repository.java";
		createFile(directory.getAbsolutePath() + "/src/main/java/com/" + companyname + "/app/soa/"
				+ "/infrastructure/persist/" + lastOutPath + "/", outputPath);
		FileWriter fw = new FileWriter(outputPath);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(persist);
		pw.flush();
		pw.close();
	}

	private void writeApplicationImpl(String applicationImpl, File directory) throws Exception {
		// TODO Auto-generated method stub
		String outputPath = directory.getAbsolutePath() + "/src/main/java/com/" + companyname + "/"
				+ "/app/soa/application/" + lastOutPath + "/" + firstUpperCase(domainname) + "Service.java";
		createFile(directory.getAbsolutePath() + "/src/main/java/com/" + companyname + "/" + "/app/soa/application/"
				+ lastOutPath + "/", outputPath);
		FileWriter fw = new FileWriter(outputPath);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(applicationImpl);
		pw.flush();
		pw.close();
	}

	private void writeApplication(String interfaces, File directory) throws Exception {
		// TODO Auto-generated method stub
		String path = directory.getAbsolutePath();
		path = path.replaceAll("sports-app-soa", "sports-app-remote");
		String outputPath = path + "/src/main/java/com/" + companyname + "/" + "/app/soa/remote/" + lastOutPath + "/"
				+ firstUpperCase(domainname) + "ServiceRemote.java";

		createFile(path + "/src/main/java/com/" + companyname + "/" + "/app/soa/remote/" + lastOutPath + "/",
				outputPath);
		FileWriter fw = new FileWriter(outputPath);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(interfaces);
		pw.flush();
		pw.close();
	}

	private String buildApplication() {
		StringBuffer sb = new StringBuffer();
		sb.append(
				"package com." + companyname + "." + anyLowerCase(projectName) + ".remote." + lastpackage + ";\r\n\n");

		sb.append("import com." + companyname + ".sports.domain." + lastpackage + "." + firstUpperCase(domainname)
				+ ";\r\n");
		sb.append("import com.youyisi.app.soa.remote.BaseServiceInterface;\r\n\n");

		sb.append("/**\r\n");
		sb.append(" * @author " + authorName + "\r\n");
		sb.append(" * @time " + getDate() + "\r\n");
		sb.append(" */\r\n");
		sb.append("public interface " + firstUpperCase(domainname) + "ServiceRemote extends BaseServiceInterface<Long, "
				+ firstUpperCase(domainname) + "> {\r\n\n");

		sb.append("}\r\n");

		return sb.toString();
	}

	private void writeInterfaces(String interfaces, File directory) throws Exception {
		String path = directory.getAbsolutePath();
		path = path.replaceAll("sports-app\\\\", "");
		path = path.replaceAll("sports-app-soa", "sports-portal-web");

		String outputPath = path + "/src/main/java/com/" + companyname + "/sports/" + "/interfaces/controller/"
				+ lastOutPath + "/" + firstUpperCase(domainname) + "Controller.java";
		createFile(
				path + "/src/main/java/com/" + companyname + "/sports/" + "/interfaces/controller/" + lastOutPath + "/",
				outputPath);
		FileWriter fw = new FileWriter(outputPath);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(interfaces);
		pw.flush();
		pw.close();
	}

	private String buildInterfaces() {
		StringBuffer sb = new StringBuffer();
		sb.append("package com." + companyname + "." + anyLowerCase("sports") + ".interfaces.controller." + lastpackage
				+ ";\r\n\n");

		sb.append("import org.springframework.beans.factory.annotation.Autowired;\r\n");
		sb.append("import org.springframework.stereotype.Controller;\r\n");
		sb.append("import org.springframework.web.bind.annotation.PathVariable;\r\n");
		sb.append("import org.springframework.web.bind.annotation.RequestMapping;\r\n");
		sb.append("import org.springframework.web.bind.annotation.RequestMethod;\r\n");

		sb.append("import org.springframework.web.bind.annotation.ResponseBody;\r\n");
		sb.append("import com.youyisi.app.soa.exception.SoaException;\r\n");
		sb.append("import com.youyisi.sports.constant.SystemMessage;\r\n");

		sb.append("import com." + companyname + "." + anyLowerCase(projectName) + ".remote." + lastpackage + "."
				+ firstUpperCase(domainname) + "ServiceRemote;\r\n");
		sb.append("import com." + companyname + "." + anyLowerCase("sports") + ".domain." + lastpackage + "."
				+ firstUpperCase(domainname) + ";\r\n");
		sb.append("import com." + companyname + ".lang.Page;\r\n\n");
		sb.append("import com.youyisi.sports.interfaces.controller.BaseController;\r\n\n");
		sb.append("import org.slf4j.Logger;\r\n\n");
		sb.append("import org.slf4j.LoggerFactory;\r\n\n");
		sb.append("import com.youyisi.lang.domain.WebResultInfoWrapper;\r\n\n");

		sb.append("/**\r\n");
		sb.append(" * @author " + authorName + "\r\n");
		sb.append(" * @time " + getDate() + "\r\n");
		sb.append(" */\r\n");
		sb.append("@Controller\r\n");
		sb.append("@RequestMapping(\"/" + anyLowerCase(domainname) + "\")\r\n");
		sb.append("public class " + firstUpperCase(domainname) + "Controller extends BaseController{\r\n\n");
		sb.append("\t@Autowired\r\n");
		sb.append("\tprivate " + firstUpperCase(domainname) + "ServiceRemote " + firstLowerCase(domainname)
				+ "ServiceRemote;\r\n\n");
		sb.append("\tprivate Logger log = LoggerFactory.getLogger(" + firstUpperCase(domainname)
				+ "Controller.class);\r\n\n");

		sb.append("\t@ResponseBody\r\n");
		sb.append("\t@RequestMapping(value = \"/list\", method = { RequestMethod.GET, RequestMethod.POST })\r\n");
		sb.append("\tpublic WebResultInfoWrapper list(Integer currentPage, Integer pageSize) {\r\n");

		sb.append("\t\tWebResultInfoWrapper webResultInfoWrapper = new WebResultInfoWrapper();\r\n");
		sb.append("\t\ttry {\r\n");

		sb.append("\t\tPage<" + firstUpperCase(domainname) + "> page = new Page<" + firstUpperCase(domainname)
				+ ">();\r\n");
		sb.append("\t\tif(null != currentPage) {\r\n");
		sb.append("\t\t\tpage.setCurrentPage(currentPage);\r\n");
		sb.append("\t\t}\r\n");
		sb.append("\t\tif(null != pageSize) {\r\n");
		sb.append("\t\t\tpage.setPageSize(pageSize);\r\n");
		sb.append("\t\t}else {\r\n");
		sb.append("\t\t\tpage.setPageSize(10);\r\n");
		sb.append("\t\t}\r\n");

		sb.append("\t\twebResultInfoWrapper.addResult(\"page\", " + firstLowerCase(domainname)
				+ "ServiceRemote.queryPage(page));\r\n");

		sb.append("\t\t} catch (SoaException e) {\r\n");
		sb.append("\t\tlog.error(\"----message:\"+e.getMessage());\r\n");
		sb.append("\t\twebResultInfoWrapper.setState(ERROR);\r\n");
		sb.append("\t\twebResultInfoWrapper.setMessage(SystemMessage.INTERFACEEXCEPTION_TEXT);\r\n");
		sb.append("\t\t}\r\n");

		sb.append("\t\treturn webResultInfoWrapper;\r\n");

		sb.append("\t}\r\n\n");
		sb.append("\t@ResponseBody\r\n");
		sb.append(
				"\t@RequestMapping(value = \"/{id}/detail\", method = { RequestMethod.GET, RequestMethod.POST })\r\n");
		sb.append("\tpublic WebResultInfoWrapper detail(@PathVariable(\"id\") Long id) {\r\n");

		sb.append("\t\tWebResultInfoWrapper webResultInfoWrapper = new WebResultInfoWrapper();\r\n");
		sb.append("\t\ttry {\r\n");

		sb.append("\t\twebResultInfoWrapper.addResult(\"" + firstLowerCase(domainname) + "\", "
				+ firstLowerCase(domainname) + "ServiceRemote.get(id));\r\n");
		sb.append("\t\t} catch (SoaException e) {\r\n");
		sb.append("\t\tlog.error(\"----message:\"+e.getMessage());\r\n");
		sb.append("\t\twebResultInfoWrapper.setState(ERROR);\r\n");
		sb.append("\t\twebResultInfoWrapper.setMessage(SystemMessage.INTERFACEEXCEPTION_TEXT);\r\n");
		sb.append("\t\t}\r\n");
		sb.append("\t\treturn webResultInfoWrapper;\r\n");

		sb.append("\t}\r\n\n");
		sb.append("\t@ResponseBody\r\n");
		sb.append("\t@RequestMapping(value = \"/update\", method =  { RequestMethod.GET, RequestMethod.POST })\r\n");
		sb.append("\tpublic WebResultInfoWrapper update(" + firstUpperCase(domainname) + " " + domainname + ") {\r\n");

		sb.append("\t\tWebResultInfoWrapper webResultInfoWrapper = new WebResultInfoWrapper();\r\n");
		sb.append("\t\ttry {\r\n");

		sb.append("\t\t" + firstLowerCase(domainname) + "ServiceRemote.update(" + domainname + ");\r\n");

		sb.append("\t\t} catch (SoaException e) {\r\n");
		sb.append("\t\tlog.error(\"----message:\"+e.getMessage());\r\n");
		sb.append("\t\twebResultInfoWrapper.setState(ERROR);\r\n");
		sb.append("\t\twebResultInfoWrapper.setMessage(SystemMessage.INTERFACEEXCEPTION_TEXT);\r\n");
		sb.append("\t\t}\r\n");
		sb.append("\t\treturn webResultInfoWrapper;\r\n");

		sb.append("\t}\r\n");
		sb.append("}\r\n");
		return sb.toString();
	}

	private void writeXml(String mybatisXml, File directory) throws Exception {
		String outputPath = directory.getAbsolutePath() + "/src/main/resources/META-INF/mybatis/mappers/" + lastOutPath
				+ "/" + anyLowerCase(domainname) + ".xml";
		createFile(directory.getAbsolutePath() + "/src/main/resources/META-INF/mybatis/mappers/" + lastOutPath + "/",
				outputPath);
		FileWriter fw = new FileWriter(outputPath);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(mybatisXml);
		pw.flush();
		pw.close();

	}

	private void writeDomain(String content, File directory) throws IOException {
		String path = directory.getAbsolutePath();
		path = path.replaceAll("sports-app\\\\", "");
		path = path.replaceAll("sports-app-soa", "sports-oss-comm");

		String outputPath = path + "/src/main/java/com/youyisi/sports/domain/" + lastOutPath + "/"
				+ firstUpperCase(domainname) + ".java";
		createFile(path + "/src/main/java/com/youyisi/sports/domain/" + lastOutPath + "/", outputPath);
		FileWriter fw = new FileWriter(outputPath);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(content);
		pw.flush();
		pw.close();
	}

	private void createFile(String path, String outputPath) throws IOException {
		File storagePath = new File(path);
		if (!storagePath.exists()) {
			storagePath.mkdirs();
		}
		File file = new File(outputPath);
		if (!file.exists()) {
			file.createNewFile();
		}
	}

	/**
	 * 功能：生成实体类主体代码
	 * 
	 * @param colnames
	 * @param colTypes
	 * @param colSizes
	 * @return
	 */
	private String buildDomain() {
		StringBuffer sb = new StringBuffer();
		sb.append("package " + this.domain_packageOutPath + ";\r\n");
		sb.append("\r\n");
		// sb.append("import com."+companyname+".lang.domain.BaseObject;\r\n");
		// 判断是否导入工具包
		if (f_util) {
			sb.append("import java.util.Date;\r\n");
		}
		if (f_sql) {
			sb.append("import java.sql.*;\r\n\n");
		}
		sb.append("import com.youyisi.sports.domain.BaseEntity;\r\n\n");
		// 注释部分
		sb.append("/**\r\n");
		sb.append(" * @author " + authorName + "\r\n");
		sb.append(" * @time " + getDate() + "\r\n");
		sb.append(" */\r\n");
		// 实体部分
		sb.append("\r\n\r\npublic class " + firstUpperCase(domainname) + " extends BaseEntity{\r\n");
		processAllAttrs(sb);// 属性
		processAllMethod(sb);// get set方法
		sb.append("}\r\n");

		// System.out.println(sb.toString());
		return sb.toString();
	}

	private String buildXml() {
		StringBuffer sb = new StringBuffer();
		sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
		sb.append(
				"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n");
		sb.append("<mapper namespace=\"" + this.domain_packageOutPath + "." + firstUpperCase(domainname) + "\" >\r\n");
		processResultMap(sb);
		processCommonSelect(sb);
		processGetById(sb);
		processQueryPage(sb);
		processDelete(sb);
		processSave(sb);
		processUpdate(sb);

		return sb.toString();
	}

	private void processUpdate(StringBuffer sb) {
		sb.append("\t<update id=\"update\" parameterType=\"" + firstUpperCase(domainname) + "\" >\r\n");
		sb.append("\t\tupdate " + dataBaseName + "." + tablename + " set ");
		for (int i = 0; i < colnames.length; i++) {
			if (!colnames[i].equalsIgnoreCase("id")) {
				if (i == colnames.length - 1) {
					sb.append(colnames[i] + "=" + "#{" + firstLowerCase(colnamesToProperty(colnames[i])) + "}");
				} else {
					sb.append(colnames[i] + "=" + "#{" + firstLowerCase(colnamesToProperty(colnames[i])) + "},");
				}
			}
		}

		sb.append("\n\t\twhere " + primaryKey + " = #{" + colnamesToProperty(primaryKey) + "}\r\n");
		sb.append("</update>\r\n");
		sb.append("</mapper>");
	}

	private void processSave(StringBuffer sb) {
		sb.append("\t<insert id=\"save\" parameterType=\"" + firstUpperCase(domainname) + "\" >\r\n");
		sb.append("\t\tinsert into " + dataBaseName + "." + tablename + " (");
		for (int i = 0; i < colnames.length; i++) {
			if (i == colnames.length - 1) {
				sb.append(colnames[i]);
			} else {
				sb.append(colnames[i] + ",");
			}

		}
		sb.append("\n\t\t)\r\n \t\tvalues (");
		for (int i = 0; i < colnames.length; i++) {
			if (i == colnames.length - 1) {
				sb.append("#{" + firstLowerCase(colnamesToProperty(colnames[i])) + "}");
			} else {
				sb.append("#{" + firstLowerCase(colnamesToProperty(colnames[i])) + "},");
			}

		}
		sb.append("\n\t\t)\r\n");
		sb.append("\t\t\t<selectKey keyProperty=\"" + colnamesToProperty(primaryKey)
				+ "\" resultType=\"Long\" statementType=\"PREPARED\">\r\n");
		sb.append("\t\t\tselect LAST_INSERT_ID() as value\r\n");
		sb.append("\t\t</selectKey>\r\n");
		sb.append("\t</insert>\r\n");

	}

	private void processDelete(StringBuffer sb) {
		sb.append("\t<delete id=\"delete\" parameterType=\"" + firstUpperCase(domainname) + "\" >\r\n");
		sb.append("\t\tdelete from " + dataBaseName + "." + tablename + "\r\n");
		sb.append("\t\twhere " + primaryKey + " = #{" + colnamesToProperty(primaryKey) + "}\r\n");
		sb.append("\t</delete>\r\n");
	}

	private void processQueryPage(StringBuffer sb) {
		sb.append("\t<select id=\"queryPage\" resultMap=\"" + firstLowerCase(domainname) + "Result\">\r\n");
		sb.append("\t\t<include refid=\"commonSelect\"/>\r\n");
		sb.append("\t\torder by " + getAlias() + "." + primaryKey + " asc\r\n");
		sb.append("\t</select>\r\n");
	}

	private void processGetById(StringBuffer sb) {
		sb.append("\t<select id=\"getById\" resultMap=\"" + firstLowerCase(domainname)
				+ "Result\" parameterType=\"java.lang.Long\" >\r\n");
		sb.append("\t\t<include refid=\"commonSelect\"/>\r\n");
		sb.append("\t\twhere " + getAlias() + "." + primaryKey + " = #{" + colnamesToProperty(primaryKey) + "}\r\n");
		sb.append("\t</select>\r\n");

	}

	private String getAlias() {
		String alias = tablename.charAt(0) + "";
		return alias.toLowerCase();
	}

	private void processCommonSelect(StringBuffer sb) {
		sb.append("\t<sql id=\"commonSelect\" >\r\n");
		sb.append("\t\tselect");
		for (int i = 0; i < colnames.length; i++) {
			if (i == colnames.length - 1) {
				sb.append(" " + getAlias() + "." + colnames[i] + "\r\n");
			} else {
				sb.append(" " + getAlias() + "." + colnames[i] + ",");
			}

		}

		sb.append("\t\tfrom " + dataBaseName + "." + tablename + " " + getAlias() + "\r\n");
		sb.append("\t</sql>\r\n");

	}

	private void processResultMap(StringBuffer sb) {
		sb.append("\t<resultMap id=\"" + firstLowerCase(domainname) + "Result\" type=\"" + firstUpperCase(domainname)
				+ "\" >\r\n");
		for (int i = 0; i < colnames.length; i++) {
			if (colnames[i].equalsIgnoreCase("id")) {
				sb.append("\t<id column=\"" + colnames[i] + "\" property=\""
						+ firstLowerCase(colnamesToProperty(colnames[i])) + "\" />\r\n");
			} else {
				sb.append("\t\t<result column=\"" + colnames[i] + "\" property=\""
						+ firstLowerCase(colnamesToProperty(colnames[i])) + "\" />\r\n");
			}
		}
		sb.append("\t</resultMap>\r\n");

	}

	/**
	 * 功能：生成所有属性
	 * 
	 * @param sb
	 */
	private void processAllAttrs(StringBuffer sb) {

		for (int i = 0; i < colnames.length; i++) {
			if (!colnames[i].equalsIgnoreCase("id")) {
				sb.append("\tprivate " + sqlType2JavaType(colTypes[i]) + " "
						+ firstLowerCase(colnamesToProperty(colnames[i])) + "; //\r\n");
			}

		}

	}

	/**
	 * 功能：生成所有方法
	 * 
	 * @param sb
	 */
	private void processAllMethod(StringBuffer sb) {

		for (int i = 0; i < colnames.length; i++) {
			sb.append("\tpublic void set" + firstUpperCase(colnamesToProperty(colnames[i])) + "("
					+ sqlType2JavaType(colTypes[i]) + " " + firstLowerCase(colnamesToProperty(colnames[i])) + "){\r\n");
			sb.append("\t\tthis." + firstLowerCase(colnamesToProperty(colnames[i])) + "="
					+ firstLowerCase(colnamesToProperty(colnames[i])) + ";\r\n");
			sb.append("\t}\r\n");
			sb.append("\tpublic " + sqlType2JavaType(colTypes[i]) + " get"
					+ firstUpperCase(colnamesToProperty(colnames[i])) + "(){\r\n");
			sb.append("\t\treturn " + firstLowerCase(colnamesToProperty(colnames[i])) + ";\r\n");
			sb.append("\t}\r\n");
		}

	}

	/**
	 * 功能：将输入字符串的首字母改成大写
	 * 
	 * @param str
	 * @return
	 */
	private String firstUpperCase(String str) {

		char[] ch = str.toCharArray();
		if (ch[0] >= 'a' && ch[0] <= 'z') {
			ch[0] = (char) (ch[0] - 32);
		}

		return new String(ch);
	}

	/**
	 * 功能：将输入字符串的首字母改成大写
	 * 
	 * @param str
	 * @return
	 */
	private String anyLowerCase(String str) {

		char[] ch = str.toCharArray();
		for (int index = 0; index < ch.length; index++) {
			if (ch[index] >= 'A' && ch[index] <= 'Z') {
				ch[index] = (char) (ch[index] + 32);
			} else {
				ch[index] = ch[index];
			}
		}
		return new String(ch);
	}

	/**
	 * 功能：将输入字符串的首字母改成大写
	 * 
	 * @param str
	 * @return
	 */
	private String colnamesToProperty(String str) {
		if (str.contains("_")) {
			char[] ch = str.toCharArray();
			char[] sb = new char[ch.length];
			int _index = 0;
			for (int index = 0; index < ch.length; index++) {
				if (ch[index] >= 'A' && ch[index] <= 'Z') {
					sb[_index] = (char) ((ch[index] + 32));
				} else if (ch[index] == '_') {
					index++;
					if (ch[index] >= 'A' && ch[index] <= 'Z') {
						sb[_index] = ch[index];
					} else {
						sb[_index] = (char) ((ch[index] - 32));
					}
				} else {
					sb[_index] = ch[index];
				}
				_index++;
			}
			return new String(sb).trim();
		} else {
			char[] ch = str.toCharArray();
			if (ch[0] >= 'A' && ch[0] <= 'Z') {
				return anyLowerCase(str);
			}
			return firstLowerCase(str);

		}

	}

	/**
	 * 功能：将输入字符串的首字母改成小写
	 * 
	 * @param str
	 * @return
	 */
	private String firstLowerCase(String str) {

		char[] ch = str.toCharArray();
		if (ch[0] >= 'A' && ch[0] <= 'Z') {
			ch[0] = (char) (ch[0] + 32);
		}

		return new String(ch);
	}

	/**
	 * 功能：获得列的数据类型
	 * 
	 * @param sqlType
	 * @return
	 */
	private String sqlType2JavaType(String sqlType) {

		if (sqlType.equalsIgnoreCase("bit")) {
			return "Boolean";
		} else if (sqlType.equalsIgnoreCase("tinyint")) {
			return "Byte";
		} else if (sqlType.equalsIgnoreCase("smallint")) {
			return "Short";
		} else if (sqlType.equalsIgnoreCase("int")) {
			return "Integer";
		} else if (sqlType.equalsIgnoreCase("bigint")) {
			return "Long";
		} else if (sqlType.equalsIgnoreCase("float")) {
			return "Float";
		} else if (sqlType.equalsIgnoreCase("decimal") || sqlType.equalsIgnoreCase("numeric")
				|| sqlType.equalsIgnoreCase("real") || sqlType.equalsIgnoreCase("money")
				|| sqlType.equalsIgnoreCase("smallmoney") || sqlType.equalsIgnoreCase("double")) {
			return "Double";
		} else if (sqlType.equalsIgnoreCase("varchar") || sqlType.equalsIgnoreCase("char")
				|| sqlType.equalsIgnoreCase("nvarchar") || sqlType.equalsIgnoreCase("nchar")
				|| sqlType.equalsIgnoreCase("text")) {
			return "String";
		} else if (sqlType.equalsIgnoreCase("datetime")) {
			return "Date";
		} else if (sqlType.equalsIgnoreCase("image")) {
			return "Blod";
		}

		return null;
	}

	private String getDate() {
		Date d = new Date();
		SimpleDateFormat time = new SimpleDateFormat("yyyy-MM-dd");
		return time.format(d);

	}

	/**
	 * 出口 TODO
	 * 
	 * @param args
	 */
	public static void main(String[] args) {

		new AutoGeneratedCodeHelper();

	}

}